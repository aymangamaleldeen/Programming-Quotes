{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","useForm","register","handleSubmit","errors","formState","reset","when","message","onFocus","form","onSubmit","data","onAddQuote","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","required","invalid","author","rows","text","actions","onClick","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yGCK3JC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,wBC4E/BC,EAvEG,SAACL,GAAW,IAAD,IAC3B,EAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAKIC,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAgBF,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMR,EACNS,QAAS,iBACP,yEAGJ,cAAC,EAAD,UACE,uBACEC,QAjBR,WACET,GAAc,IAiBRP,UAAWC,IAAQgB,KACnBC,SAAUR,GAxBlB,SAA2BS,GACzBpB,EAAMqB,WAAWD,GACjBN,OAmBI,UAKGd,EAAMsB,WACL,qBAAKrB,UAAWC,IAAQqB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKvB,UAAWC,IAAQuB,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,mCACEC,KAAK,OACLC,GAAG,UACClB,EAAS,SAAU,CAAEmB,SAAU,yBAErC,mBAAG5B,UAAWC,IAAQ4B,QAAtB,mBAAgClB,EAAOmB,cAAvC,aAAgC,EAAef,aAEjD,sBAAKf,UAAWC,IAAQuB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,sCACEE,GAAG,OACHI,KAAK,KACDtB,EAAS,OAAQ,CAAEmB,SAAU,2BAEnC,mBAAG5B,UAAWC,IAAQ4B,QAAtB,mBAAgClB,EAAOqB,YAAvC,aAAgC,EAAajB,aAE/C,qBAAKf,UAAWC,IAAQgC,QAAxB,SACE,wBAAQC,QA3ClB,WACE3B,GAAc,IA0CyBP,UAAU,MAAzC,kC,gBC5CGmC,UAlBf,WACG,MAA8BC,YAAQC,KAAhCC,EAAN,EAAMA,YAAcC,EAApB,EAAoBA,OACfC,EAAUC,cAahB,OAXAC,qBAAU,WACM,cAATH,GACCC,EAAQG,KAAK,aAEnB,CAACJ,EAASC,IAOL,cAAC,EAAD,CAAWnB,UAAqB,YAAVkB,EAAqBnB,WAJlD,SAAyBwB,GACzBN,EAAYM","file":"static/js/3.3e2ac50a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2B4BH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__2LymV\",\"loading\":\"QuoteForm_loading__2bfBb\",\"control\":\"QuoteForm_control__74vDR\",\"actions\":\"QuoteForm_actions__22Jwz\",\"invalid\":\"QuoteForm_invalid__3rlQI\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useState, Fragment } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering] = useState(false);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n\n  function submitFormHandler(data) {\n    props.onAddQuote(data);\n    reset();\n  }\n\n  function focusHandler() {\n    setIsEntering(true);\n  }\n  function clickHandler() {\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={() =>\n          \"Are you sure you want to leave ? All your entered data will be lost\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={focusHandler}\n          className={classes.form}\n          onSubmit={handleSubmit(submitFormHandler)}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input\n              type=\"text\"\n              id=\"author\"\n              {...register(\"author\", { required: \"Author is required\" })}\n            />\n            <p className={classes.invalid}>{errors.author?.message}</p>\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea\n              id=\"text\"\n              rows=\"5\"\n              {...register(\"text\", { required: \"the text is required\" })}\n            ></textarea>\n            <p className={classes.invalid}>{errors.text?.message}</p>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={clickHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import React ,{useEffect} from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport useHttp from \"../hooks/use-http\"\r\nimport {addQuote} from \"../lib/api\"\r\n\r\nfunction NewQuote() {\r\n   const{sendRequest , status} = useHttp(addQuote,)\r\n  const history = useHistory();\r\n\r\n  useEffect(()=>{\r\n      if(status===\"completed\"){\r\n          history.push(\"/quotes\")\r\n      }\r\n  },[status , history])\r\n\r\n\r\n  function addQuoteHandler(quoteData) {\r\n  sendRequest(quoteData);\r\n  }\r\n\r\n  return <QuoteForm isLoading={status=== \"pending\"} onAddQuote={addQuoteHandler} />;\r\n}\r\n\r\nexport default NewQuote;\r\n"],"sourceRoot":""}